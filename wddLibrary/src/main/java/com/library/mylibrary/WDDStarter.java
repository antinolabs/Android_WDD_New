package com.library.mylibrary;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import com.facetec.sdk.*;
import com.facetec.sdk.FaceTecSessionResult;
import com.library.mylibrary.utils.SessionReviewScreen;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import Processors.Config;
import Processors.LivenessCheckProcessor;
import Processors.NetworkingHelpers;
import Processors.Processor;
import okhttp3.Call;
import okhttp3.Callback;

public class WDDStarter extends AppCompatActivity {
    private static final String TAG = "WDDStarter";
    private MenuItem menu_setting;
    private Button wddStarterButton;
    public SessionReviewScreen sessionReviewScreen = new SessionReviewScreen(this);
    private int selectedColor;
    private File filelocation;
    private String accessKey, secretKey, cognitoPoolId, wddOnboardingBucket;
    private  int tableText=0,formText=0,rawText=0;
    public Processor latestProcessor;
    public FaceTecSessionResult latestSessionResult;
    String latestExternalDatabaseRefID = "";
    JSONObject latestServerResult;
    public static Bitmap bitmap;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_w_d_d_starter);
        faceteckInitialisation();
        accessKey = getIntent().getStringExtra(Constants.ACCESS_KEY);
        secretKey = getIntent().getStringExtra(Constants.SECRET_KEY);
        cognitoPoolId = getIntent().getStringExtra(Constants.COGNITO_POOL_ID);
        wddOnboardingBucket = getIntent().getStringExtra(Constants.BUCKET_NAME);
        tableText= getIntent().getIntExtra(Constants.TABLETEXT,0);
        formText= getIntent().getIntExtra(Constants.FORMTEXT,0);
        rawText=getIntent().getIntExtra(Constants.RAWTEXT,0);
        selectedColor = getIntent().getIntExtra(Constants.COLORTYPE,0);
        getSupportActionBar().setDisplayShowHomeEnabled(true);
        if(selectedColor==0)
        {
            getSupportActionBar().setBackgroundDrawable(new
                    ColorDrawable((getColor(android.R.color.holo_blue_bright))));
        }else {
            getSupportActionBar().setBackgroundDrawable(new
                    ColorDrawable((selectedColor)));
        }
        wddStarterButton = (Button) findViewById(R.id.wdd_started_btn);
        wddStarterButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onLivenessCheckPressed();
            }
        });

    }

    private void faceteckInitialisation() {
        Config.initializeFaceTecSDKFromAutogeneratedConfig(this, new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if(successful) {
                }else{
                }
            }
        });
    }

    public void onLivenessCheckPressed() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                getSessionToken(new SessionTokenCallback() {
                    @Override
                    public void onSessionTokenReceived(String sessionToken) {
                        latestProcessor = new LivenessCheckProcessor( sessionToken,WDDStarter.this);
                    }
                });
            }
        });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(latestProcessor == null) {
            return;
        }
        if(latestProcessor.isSuccess()) {

        }
        else {

        }
        sessionReviewScreen.loadAndShow(latestProcessor, new Runnable() {
            @Override
            public void run() {
                if(!latestProcessor.isSuccess()) {
                    latestExternalDatabaseRefID = "";
                }
            }
        });
    }

    public void getThumbnail(Bitmap uri, File mediaFile) {
        bitmap = uri;
        this.filelocation = mediaFile;
        if(latestProcessor.isSuccess()) {
            try {
                startActivity(new Intent(WDDStarter.this, UploadActivity.class)
                        .putExtra(Constants.FILETYPE, filelocation)
                        .putExtra(Constants.ACCESS_KEY, accessKey)
                        .putExtra(Constants.SECRET_KEY, secretKey)
                        .putExtra(Constants.TABLETEXT, tableText)
                        .putExtra(Constants.FORMTEXT, formText)
                        .putExtra(Constants.RAWTEXT, rawText)
                        .putExtra(Constants.COGNITO_POOL_ID, cognitoPoolId)
                        .putExtra(Constants.BUCKET_NAME, wddOnboardingBucket)
                        .putExtra(Constants.COLORTYPE, selectedColor));

            } catch (Exception e) {
                e.printStackTrace();
            }
        }else{
            Toast.makeText(this, "Please try again", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public boolean onSupportNavigateUp() {
        super.onBackPressed();
        return true;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_item, menu);
        menu_setting = (MenuItem) menu.findItem(R.id.wdd_setting_menu);
        menu_setting.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                startActivity(new Intent(WDDStarter.this, SettingActivity.class)
                .putExtra(Constants.COLORTYPE,selectedColor));
                finish();
                return false;
            }
        });
        return super.onCreateOptionsMenu(menu);
    }


    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
        //utils.showSessionTokenConnectionText();

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if(!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
                   // utils.handleErrorGettingServerSessionToken();
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                       // utils.hideSessionTokenConnectionText();
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                    else {
                       // utils.handleErrorGettingServerSessionToken();
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                    //utils.handleErrorGettingServerSessionToken();
                }
            }
        });
    }

    public void setLatestSessionResult(FaceTecSessionResult sessionResult) {
        this.latestSessionResult = sessionResult;
        //
        // DEVELOPER NOTE:  The following is ONLY for displaying the Sample App Session Review Screen.  This can be removed in your code.
        //
        sessionReviewScreen.setLatestSessionResult(sessionResult);
    }

    public void setLatestServerResult(JSONObject responseJSON) {
        this.latestServerResult = responseJSON;
        //
        // DEVELOPER NOTE:  The following is ONLY for displaying the Sample App Session Review Screen.  This can be removed in your code.
        //
        sessionReviewScreen.setLatestServerResult(responseJSON);
    }



}
